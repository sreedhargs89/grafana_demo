version: '3.8'

services:
  # Grafana service for visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Expose Grafana on port 3000
    volumes:
      - grafana-data:/var/lib/grafana  # Persist Grafana data
    environment:
      - GF_SECURITY_ADMIN_USER=admin  # Default admin username
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Default admin password
      - GF_USERS_ALLOW_SIGN_UP=false  # Disable user sign-up
      - GF_AUTH_BASIC_ENABLED=true  # Enable basic authentication
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped

  # Prometheus service for metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # Expose Prometheus on port 9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml  # Mount config file
      - prometheus-data:/prometheus  # Persist Prometheus data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    restart: unless-stopped

  # Node.js application that exposes metrics for Prometheus to scrape
  nodejs-app:
    build:
      context: ./app  # Build from the ./app directory
      dockerfile: Dockerfile
    container_name: nodejs-app
    ports:
      - "8080:3000"  # Expose app on port 8080, internal port remains 3000
    volumes:
      - ./app:/usr/src/app  # Mount app directory for development
      - /usr/src/app/node_modules  # Exclude node_modules from host
    environment:
      - NODE_ENV=development
    networks:
      - monitoring
    restart: unless-stopped

# Define volumes for data persistence
volumes:
  grafana-data:  # Volume for Grafana data
    driver: local
  prometheus-data:  # Volume for Prometheus data
    driver: local

# Define network for all services
networks:
  monitoring:
    driver: bridge

